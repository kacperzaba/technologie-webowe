@page "/chat"
@rendermode InteractiveServer
@using GroqApiLibrary;
@using System.Text.Json.Nodes;

<PageTitle>AI assistant</PageTitle>
<style>
    .chat-container {
    max-width: 700px;
    margin: 3rem auto;
    padding: 2rem;
    border-radius: 15px;
    background-color: #1e1e2f; 
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
    font-family: 'Roboto', sans-serif;
    color: #f1f1f1;
    border: 1px solid #444;
    }

    .chat-container h3 {
    text-align: center;
    color: #ffc107; 
    font-size: 2rem;
    font-weight: bold;
    margin-bottom: 1.5rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    }

    .alert {
    padding: 15px 20px;
    margin-bottom: 15px;
    border-radius: 10px;
    font-size: 1rem;
    line-height: 1.6;
    word-wrap: break-word;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .alert-primary {
    background-color: #4caf50; 
    color: white;
    text-align: right;
    border: 1px solid #388e3c;
    }

    .alert-secondary {
    background-color: #2c2c3e; 
    color: #f1f1f1;
    text-align: left;
    border: 1px solid #444;
    }

    .form-control {
    width: 100%;
    padding: 15px;
    margin-top: 1.5rem;
    border: 1px solid #555;
    border-radius: 8px;
    font-size: 1rem;
    background-color: #2c2c3e;
    color: #f1f1f1;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);
    transition: border-color 0.3s ease;
    }

    .form-control:focus {
    border-color: #ffc107; 
    outline: none;
    box-shadow: 0 0 10px #ffc107;
    }

    .btn-primary {
    display: block;
    width: 100%;
    padding: 15px;
    margin-top: 1rem;
    background-color: #ffc107; 
    border: none;
    border-radius: 8px;
    font-size: 1.2rem;
    color: #333;
    font-weight: bold;
    text-transform: uppercase;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .btn-primary:hover {
    background-color: #ffa000; 
    transform: translateY(-3px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
    }


</style>

<div class="chat-container">
    <h3>Chat</h3>

    @foreach (var message in messages)
    {
        @if (message.IsUsersMessage)
        {
            <strong>User</strong>
            <div class="alert alert-primary">@message.Message</div>
        }
        else {
            <strong>Chat</strong>
            <div class="alert alert-secondary">@message.Message</div>
        }
    }

    <input class="form-control" placeholder="Type your message" @bind="newMessage" />
    <button class="btn btn-primary" type="button" @onclick="AskChat">Ask chat</button>

    <input class="form-control" placeholder="Type the image url" @bind="imageUrl" />
    <button class="btn btn-primary" type="button" @onclick="AskChatWithImage">Ask chat with image</button>
    <p>@answerWithImage</p>

    <InputFile  />
    <button class="btn btn-primary" type="button" >Ask Chat with Image from your disc</button>
</div>


@code{
    private List<ChatMessage> messages = new();

    private string? newMessage;
    private string? newPrompt;
    private string? answer;
    private string? imageUrl;
    private string? answerWithImage;

    private static string apiKey = "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";
    private GroqApiClient groqApi = new GroqApiClient(apiKey);

    private async Task AskChat()
    {
        newPrompt = newMessage;
        if(messages != null)
        {
            newPrompt = "Here is our conversation history: ";
            foreach(var message in messages)
            {
                newPrompt += message.Message + " ";
            }

            newPrompt+= " Now i will send you a question. Answer for that question. " + newMessage;
        }
        var request = new JsonObject
        {
            ["model"] = "mixtral-8x7b-32768",
            ["messages"] = new JsonArray
            {
                new JsonObject
                {
                    ["role"] = "user",
                    ["content"] = newPrompt
                }
            }
        };

        var result = await groqApi.CreateChatCompletionAsync(request);
        answer = result?["choices"]?[0]?["message"]?["content"]?.ToString();

        messages.Add(new ChatMessage {Message = newMessage, IsUsersMessage = true});
        messages.Add(new ChatMessage {Message = answer, IsUsersMessage = false});
        newMessage = String.Empty;
        StateHasChanged();
    }
    private async Task AskChatWithImage(MouseEventArgs e)
    {
        var request = new JsonObject
        {
            ["model"] = "llama-3.2-90b-vision-preview",
            ["messages"] = new JsonArray
            {
                new JsonObject
                {
                    ["role"] = "user",
                    ["content"] = new JsonArray
                    {
                        new JsonObject
                        {
                            ["type"] = "text",
                            ["text"] = "What is in this image?"
                        },
                        new JsonObject
                        {
                            ["type"] = "image_url",
                            ["image_url"] = new JsonObject
                            {
                                ["url"] = imageUrl
                            }
                        }
                    }
                }
            }
        };


        var result = await groqApi.CreateChatCompletionAsync(request);
        answerWithImage = result?["choices"]?[0]?["message"]?["content"]?.ToString();

    }
}